// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Service {
  id      Int       @id @default(autoincrement())
  name    String
  amount  Float     @default(0)
  Payment Payment[]
}

model Customer {
  id            String    @id @default(cuid())
  name          String
  cellPhone     String
  email         String    @unique
  cpf           String    @unique
  password      String
  token         String?
  tokenExpires  DateTime?
  agreedToTerms Boolean
  createdAt     DateTime  @default(now())
  updateAt      DateTime  @default(now()) @updatedAt

  payments            Payment[]
  digitalCertificates DigitalCertificate[]
}

model DigitalCertificate {
  id             String    @id @default(cuid())
  cnpj           String?
  cpf            String?
  customerId     String
  expirationDate DateTime?
  isActive       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Payment {
  id            Int            @id @default(autoincrement())
  customerId    String
  order         String         @unique
  paymentCode   String         @unique
  quantity      Int            @default(1)
  serviceId     Int
  totalAmount   Float?
  status        PaymentStatus
  paymentMethod PaymentMethod?
  couponId      Int?
  paymentDate   DateTime       @default(now())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])
  service  Service  @relation(fields: [serviceId], references: [id])
  Coupon   Coupon?  @relation(fields: [couponId], references: [id])
}

model Coupon {
  id            Int          @id @default(autoincrement())
  code          String       @unique
  discountType  DiscountType // ENUM: "PERCENTAGE" ou "FIXED"
  discountValue Float
  active        Boolean      @default(true)
  usageLimit    Int? // Quantas vezes pode ser usado, se quiser limitar
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  payments Payment[]
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model Admin {
  id           String    @id @default(cuid())
  user         String    @unique
  password     String
  fl_role      Int
  token        String?
  tokenExpires DateTime?
}

enum PaymentStatus {
  paid
  pending
  waiting_payment
  expired
}

enum PaymentMethod {
  credit_card
  pix
}
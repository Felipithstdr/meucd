generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Service {
  id      Int       @id @default(autoincrement())
  name    String
  amount  Float     @default(0)
  Payment Payment[]
}

model Customer {
  id                  String               @id @default(cuid())
  name                String
  cellPhone           String
  email               String               @unique
  cpf                 String               @unique
  password            String
  token               String?
  tokenExpires        DateTime?
  agreedToTerms       Boolean
  createdAt           DateTime             @default(now())
  updateAt            DateTime             @default(now()) @updatedAt
  digitalCertificates DigitalCertificate[]
  payments            Payment[]
}

model DigitalCertificate {
  id             String    @id @default(cuid())
  ecnpj          String?   @unique
  cpf            String?
  customerId     String
  expirationDate DateTime?
  isActive       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  ecpf           String?   @unique
  issueCode      String?
  link           String?
  protocol       String?
  customer       Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Payment {
  id            Int            @id @default(autoincrement())
  customerId    String
  order         String         @unique
  paymentCode   String         @unique
  quantity      Int            @default(1)
  serviceId     Int
  totalAmount   Float?
  status        PaymentStatus
  paymentMethod PaymentMethod?
  couponId      Int?
  paymentDate   DateTime       @default(now())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Coupon        Coupon?        @relation(fields: [couponId], references: [id])
  customer      Customer       @relation(fields: [customerId], references: [id])
  service       Service        @relation(fields: [serviceId], references: [id])
  PaymentSplit  PaymentSplit[]
}

model PaymentSplit {
  id        Int               @id @default(autoincrement())
  paymentId Int
  type      SplitReceiverType
  amount    Float
  createdAt DateTime          @default(now())
  payment   Payment           @relation(fields: [paymentId], references: [id], onDelete: Cascade)
}

model Coupon {
  id            Int          @id @default(autoincrement())
  code          String       @unique
  discountType  DiscountType
  discountValue Float
  active        Boolean      @default(true)
  usageLimit    Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  payments      Payment[]
}

model Admin {
  id           String    @id @default(cuid())
  user         String    @unique
  password     String
  fl_role      Int
  token        String?
  tokenExpires DateTime?
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum PaymentStatus {
  paid
  created
  processing
  refunded
  canceling
  canceled
  transfer
}

enum PaymentMethod {
  credit_card
  pix
}

enum SplitReceiverType {
  COMPANY
  AFFILIATE
  THIRD_PARTY
}
